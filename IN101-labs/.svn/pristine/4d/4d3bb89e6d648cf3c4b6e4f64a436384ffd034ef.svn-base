/**
 * @file bst-map.h
 *
 * @brief Simple definition of BST containing map values
 *
 * @author Christophe Garion
 *
 * This is a simple definition of a binary search tree containing `int`
 * values implemented using nodes linked by pointers. Warning: the cells
 * pointers should not be shared as deallocation of a BST
 * deallocates the memory space reserved for the cells!
 *
 * The API of the BST is defined as follows:
 *
 * - a function to create an empty BST
 * - a function to check is the BST is empty
 * - a function to get the value at the root of the BST
 * - a function to get the size of the BST
 * - a function to get the height of the BST
 * - a function to get the left child of the BST
 * - a function to get the right child of the BST
 * - a function to retrieve a value in the BST
 * - a function to insert a value in the BST
 * - a function to delete a value in the BST
 * - a function to insert a value in the BST (AVL)
 * - a function to delete a value in the BST (AVL)
 * - a function to print the nodes values in-order
 * - a function to deallocate the BST
 * - a function to print the BST
 */

#ifndef BST_MAP_H
#define BST_MAP_H

#include <stdbool.h>
#include "sokoban.h"



/**
 * @brief An alias to the structure representing the nodes of
 *        the tree.
 */
typedef struct bst_node bst_node;

/**
 * @brief A binary tree is just a pointer to the root node
 *        of the tree.
 */
typedef  bst_node *bst_tree;

/**
 * @brief The structure representing the nodes of the
 *        binary tree.
 */
struct bst_node {
    /** The left subtree of the node */
    bst_tree big;
    /** The value/key in the node */
    game_map  *map_struct;
    /** The right subtree of the node */
    bst_tree small;
};

/**
 * @brief Create a nil binary search tree.
 *
 * @param p_tree  a pointer to the binary search tree to
 *                be set to nil
 *
 * @post After the call, p_tree points to an empty binary
 *       search tree.
 */
bst_tree *nil_tree(void);

/**
 * @brief Insert a value in the tree.
 *
 * @param p_tree  a pointer to the tree in which
 *                the value is to be inserted
 * @param map_struct   the map to be inserted
 *
 * @post map is added
 * 
 * @return bool true is map has been explored
 */
bool insert(bst_tree *p_tree, game_map *map_struct);
#endif
